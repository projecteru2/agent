// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"
	io "io"

	mock "github.com/stretchr/testify/mock"

	types "github.com/projecteru2/agent/types"
)

// Runtime is an autogenerated mock type for the Runtime type
type Runtime struct {
	mock.Mock
}

// AttachWorkload provides a mock function with given fields: ctx, ID
func (_m *Runtime) AttachWorkload(ctx context.Context, ID string) (io.Reader, io.Reader, error) {
	ret := _m.Called(ctx, ID)

	var r0 io.Reader
	if rf, ok := ret.Get(0).(func(context.Context, string) io.Reader); ok {
		r0 = rf(ctx, ID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(io.Reader)
		}
	}

	var r1 io.Reader
	if rf, ok := ret.Get(1).(func(context.Context, string) io.Reader); ok {
		r1 = rf(ctx, ID)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(io.Reader)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, string) error); ok {
		r2 = rf(ctx, ID)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// CollectWorkloadMetrics provides a mock function with given fields: ctx, ID
func (_m *Runtime) CollectWorkloadMetrics(ctx context.Context, ID string) {
	_m.Called(ctx, ID)
}

// Events provides a mock function with given fields: ctx, filters
func (_m *Runtime) Events(ctx context.Context, filters map[string]string) (<-chan *types.WorkloadEventMessage, <-chan error) {
	ret := _m.Called(ctx, filters)

	var r0 <-chan *types.WorkloadEventMessage
	if rf, ok := ret.Get(0).(func(context.Context, map[string]string) <-chan *types.WorkloadEventMessage); ok {
		r0 = rf(ctx, filters)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan *types.WorkloadEventMessage)
		}
	}

	var r1 <-chan error
	if rf, ok := ret.Get(1).(func(context.Context, map[string]string) <-chan error); ok {
		r1 = rf(ctx, filters)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(<-chan error)
		}
	}

	return r0, r1
}

// GetStatus provides a mock function with given fields: ctx, ID, checkHealth
func (_m *Runtime) GetStatus(ctx context.Context, ID string, checkHealth bool) (*types.WorkloadStatus, error) {
	ret := _m.Called(ctx, ID, checkHealth)

	var r0 *types.WorkloadStatus
	if rf, ok := ret.Get(0).(func(context.Context, string, bool) *types.WorkloadStatus); ok {
		r0 = rf(ctx, ID, checkHealth)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.WorkloadStatus)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, bool) error); ok {
		r1 = rf(ctx, ID, checkHealth)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetWorkloadName provides a mock function with given fields: ctx, ID
func (_m *Runtime) GetWorkloadName(ctx context.Context, ID string) (string, error) {
	ret := _m.Called(ctx, ID)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, ID)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, ID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsDaemonRunning provides a mock function with given fields: ctx
func (_m *Runtime) IsDaemonRunning(ctx context.Context) bool {
	ret := _m.Called(ctx)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context) bool); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// ListWorkloadIDs provides a mock function with given fields: ctx, filters
func (_m *Runtime) ListWorkloadIDs(ctx context.Context, filters map[string]string) ([]string, error) {
	ret := _m.Called(ctx, filters)

	var r0 []string
	if rf, ok := ret.Get(0).(func(context.Context, map[string]string) []string); ok {
		r0 = rf(ctx, filters)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, map[string]string) error); ok {
		r1 = rf(ctx, filters)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LogFieldsExtra provides a mock function with given fields: ctx, ID
func (_m *Runtime) LogFieldsExtra(ctx context.Context, ID string) (map[string]string, error) {
	ret := _m.Called(ctx, ID)

	var r0 map[string]string
	if rf, ok := ret.Get(0).(func(context.Context, string) map[string]string); ok {
		r0 = rf(ctx, ID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, ID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Name provides a mock function with given fields:
func (_m *Runtime) Name() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

type mockConstructorTestingTNewRuntime interface {
	mock.TestingT
	Cleanup(func())
}

// NewRuntime creates a new instance of Runtime. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRuntime(t mockConstructorTestingTNewRuntime) *Runtime {
	mock := &Runtime{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
